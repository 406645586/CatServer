--- a/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -1,14 +_,25 @@
 package net.minecraft.server.network;
 
+import com.mojang.authlib.GameProfile;
+import java.net.InetSocketAddress;
+import java.util.Iterator;
+import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_18_R2.CraftServer;
+import org.bukkit.craftbukkit.v1_18_R2.util.CraftChatMessage;
+import org.bukkit.craftbukkit.v1_18_R2.util.CraftIconCache;
+import org.bukkit.entity.Player;
 
 public class ServerStatusPacketListenerImpl implements ServerStatusPacketListener {
    private static final Component f_10081_ = new TranslatableComponent("multiplayer.status.request_handled");
@@ -33,7 +_,114 @@
          this.f_10083_.m_129507_(f_10081_);
       } else {
          this.f_10084_ = true;
-         this.f_10083_.m_129512_(new ClientboundStatusResponsePacket(this.f_10082_.m_129928_()));
+         // CraftBukkit start
+         // this.connection.send(new PacketStatusOutServerInfo(this.server.getStatus()));
+
+         final Object[] players = f_10082_.m_6846_().f_11196_.toArray();
+         class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent {
+
+            public CraftIconCache icon;
+
+            public ServerListPingEvent(Connection connection, MinecraftServer server) {
+               super(((InetSocketAddress) connection.m_129523_()).getAddress(), server.m_129916_(), server.m_6846_().m_11310_());
+               this.icon = ((CraftServer) Bukkit.getServer()).getServerIcon();
+            }
+
+            public Object[] getPlayers() {
+               return players;
+            }
+
+            @Override
+            public void setServerIcon(org.bukkit.util.CachedServerIcon icon) {
+               if (!(icon instanceof CraftIconCache)) {
+                  throw new IllegalArgumentException(icon + " was not created by " + org.bukkit.craftbukkit.v1_18_R2.CraftServer.class);
+               }
+               this.icon = (CraftIconCache) icon;
+            }
+
+            @Override
+            public Iterator<Player> iterator() throws UnsupportedOperationException {
+               return new Iterator<>() {
+                  int i;
+                  int ret = Integer.MIN_VALUE;
+                  ServerPlayer player;
+
+                  @Override
+                  public boolean hasNext() {
+                     if (player != null) {
+                        return true;
+                     }
+                     final Object[] currentPlayers = players;
+                     for (int length = currentPlayers.length, i = this.i; i < length; i++) {
+                        final ServerPlayer player = (ServerPlayer) currentPlayers[i];
+                        if (player != null) {
+                           this.i = i + 1;
+                           this.player = player;
+                           return true;
+                        }
+                     }
+                     return false;
+                  }
+
+                  @Override
+                  public Player next() {
+                     if (!hasNext()) {
+                        throw new java.util.NoSuchElementException();
+                     }
+                     final ServerPlayer player = this.player;
+                     this.player = null;
+                     this.ret = this.i - 1;
+                     return player.getBukkitEntity();
+                  }
+
+                  @Override
+                  public void remove() {
+                     final Object[] currentPlayers = players;
+                     final int i = this.ret;
+                     if (i < 0 || currentPlayers[i] == null) {
+                        throw new IllegalStateException();
+                     }
+                     currentPlayers[i] = null;
+                  }
+               };
+            }
+         }
+
+         ServerListPingEvent event = new ServerListPingEvent(f_10083_, f_10082_);
+         this.f_10082_.server.getPluginManager().callEvent(event);
+
+         java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(event.getPlayers().length);
+         for (Object player : event.getPlayers()) {
+            if (player != null) {
+               ServerPlayer entityPlayer = ((ServerPlayer) player);
+               if (entityPlayer.m_184128_()) {
+                  profiles.add(entityPlayer.m_36316_());
+               } else {
+                  profiles.add(MinecraftServer.f_195496_);
+               }
+            }
+         }
+
+         ServerStatus.Players playerSample = new ServerStatus.Players(event.getMaxPlayers(), profiles.size());
+         if (!this.f_10082_.m_183306_()) {
+            // Spigot Start
+            if ( !profiles.isEmpty() ) {
+               java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
+               profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            }
+            // Spigot End
+            playerSample.m_134924_(profiles.toArray(new GameProfile[profiles.size()]));
+         }
+
+         ServerStatus ping = new ServerStatus();
+         ping.m_134906_(event.icon.value);
+         ping.m_134908_(CraftChatMessage.fromString(event.getMotd(), true)[0]);
+         ping.m_134910_(playerSample);
+         int version = SharedConstants.m_183709_().getProtocolVersion();
+         ping.m_134912_(new ServerStatus.Version(f_10082_.m_130001_() + " " + f_10082_.m_7630_(), version));
+         ping.setForgeData(this.f_10082_.m_129928_().getForgeData());
+         this.f_10083_.m_129512_(new ClientboundStatusResponsePacket(ping));
+         // CraftBukkit end
       }
    }
 
